
#
# Copyright 2025 okdp.io
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Build, test and push KuboCD packages

on:
  workflow_call:
    inputs:
      publish_to_registry:
        description: Wheter to push to the registry
        required: false
        type: string
        default: "false"
      registry:
        description: The container registry 
        required: true
        type: string
      ci_registry:
        description: "The registry used to push ci images"
        required: false
        type: string
        default: "ghcr.io"
      oci_package_prefix:
        description: "OCI package prefix, e.g., 'quay.io/my-org/<PACKAGE-PREFIX>', i.e.: <PACKAGE-PREFIX> = sandbox-packages"
        required: true
        type: string
      runs-on:
        description: GitHub Actions Runner image
        required: true
        type: string

defaults:
  run:
    shell: bash

jobs:
  
  kubocd-package:
    runs-on: ${{ inputs.runs-on }}
    steps:

      - name: Checkout Repo ⚡️
        if: inputs.publish_to_registry == 'false'
        uses: actions/checkout@v4

      # - name: Free up disk space 📦
      #   if: inputs.publish_to_registry == 'false'
      #   uses: okdp/gh-workflows/.github/actions/free-disk-space@v1

      - name: Login to the CI registry (${{ inputs.ci_registry }}) 🔐
        if: inputs.publish_to_registry == 'false'
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.ci_registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login into public registry (${{ inputs.registry }}) 🔐
        if: inputs.publish_to_registry == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_ROBOT_TOKEN }}

      - name: Set CI Github container registry namespace (${{ inputs.ci_registry }})
        if: inputs.publish_to_registry == 'false'
        run:  |
          echo "OWNER=${GITHUB_REPOSITORY_OWNER@L}" >> $GITHUB_ENV
          echo "REGISTRY=${{ inputs.ci_registry }}" >> $GITHUB_ENV
        shell: bash

      - name: Set public container registry namespace (${{ inputs.registry }})
        if: inputs.publish_to_registry == 'true'
        run:  |
          echo "OWNER=${GITHUB_REPOSITORY_OWNER@L}/jupyter" >> $GITHUB_ENV
          echo "REGISTRY=${{ inputs.registry }}" >> $GITHUB_ENV
        shell: bash

      # Setup prerequisites
      - name: Set up Kind integration tests cluster 📦
        if: inputs.publish_to_registry == 'false'
        uses: okdp/gh-workflows/.github/actions/setup-kind@v1

      - name: Setup helm 🛠️
        if: inputs.publish_to_registry == 'false'
        uses: azure/setup-helm@v4.3.1
        with:
          version: v3.18.6
          
      - name: Setup Flux CLI 🛠️
        if: inputs.publish_to_registry == 'false'
        uses: fluxcd/flux2/action@main
        with:
          version: '2.6.4'

      - name: Deploy Flux (Basic Mode)
        if: inputs.publish_to_registry == 'false'
        run: flux install
      
      - name: Wait until FluxCD controllers are ready ⌛
        if: inputs.publish_to_registry == 'false'
        run: |
          kubectl wait --for=condition=ready pod -l app=source-controller -n flux-system --timeout=300s

      - name: Verify FluxCD controllers installation ✅
        if: inputs.publish_to_registry == 'false'
        run: |
          flux version
          kubectl -n flux-system get pods

      - name: Deploy KuboCD controllers on Kind 🛠️
        if: inputs.publish_to_registry == 'false'
        run:
          kubectl apply -f clusters/sandbox/flux/kubocd.yaml

      - name: Install KuboCD CLI 🛠️
        run: |
          # curl -L -o kubocd https://github.com/kubocd/kubocd/releases/download/v0.2.2/kubocd_Linux_x86_64
          # Temporary fix for: https://github.com/kubocd/kubocd/issues/2
          curl -L -o kubocd https://github.com/kubocd/kubocd/releases/download/v0.2.2/kubocd_fix2_Linux_x86_64

          # Make it executable
          chmod +x kubocd

          # Move to /usr/local/bin
          sudo mv kubocd /usr/local/bin/

          # Verify installation
          kubocd version

      # Build and push packages
      - name: Find KuboCD packages
        run: |
          KUBOCD_PACKAGES=$(find packages -type f \( -name "*.yaml" -o -name "*.yml" \) -exec grep -l '^modules:' {} \; | tr '\n' ' ')
          echo "KUBOCD_PACKAGES=$KUBOCD_PACKAGES" >> $GITHUB_ENV

      - name: Build and push KuboCD packages into CI registry (${{ inputs.ci_registry }})
        if: inputs.publish_to_registry == 'false'
        run: |
          for package in ${KUBOCD_PACKAGES}
          do
             echo "kubocd package ${package} --ociRepoPrefix $REGISTRY/$OWNER/${{ inputs.oci_package_prefix }}"
             kubocd package ${package} --ociRepoPrefix $REGISTRY/$OWNER/${{ inputs.oci_package_prefix }}
          done
        env:
          KCD_OCI_GHCR_IO_USER: ${{ github.actor }}
          KCD_OCI_GHCR_IO_SECRET: ${{ secrets.GITHUB_TOKEN }}

      # Deploy and test installation
      - name: Deploy and test releases on Kind cluster 🚀
        if: inputs.publish_to_registry == 'false'
        run: |
          KUBOCD_CONTEXT=clusters/sandbox/default-context.yaml
          KUBOCD_RELEASES=$(find clusters/sandbox/releases -type d ! -exec find {} -type d -mindepth 1 \; | sort -u | tr '\n' ' ')

          echo "Apply context: $KUBOCD_CONTEXT"
          sed "s|${{ inputs.registry }}/$OWNER/${{ inputs.oci_package_prefix }}|${{ inputs.ci_registry }}/$OWNER/${{ inputs.oci_package_prefix }}|g" \
          "$KUBOCD_CONTEXT" | kubectl apply -f -

          # Find all KuboCD releases
          echo "Found KuboCD releases: $KUBOCD_RELEASES"

          for release in $KUBOCD_RELEASES; do
            echo "Applying releases in $release"
            # Replace ${{ inputs.registry }} with ${{ inputs.ci_registry }} on the fly and apply
            find "$release" -type f \( -name "*.yaml" -o -name "*.yml" \) | while read rel; do 
                sed "s|${{ inputs.registry }}/$OWNER/${{ inputs.oci_package_prefix }}|${{ inputs.ci_registry }}/$OWNER/${{ inputs.oci_package_prefix }}|g" \
                "$rel" | kubectl apply -f -
            done
          done

      - name: Test the releases deployment ✅
        if: inputs.publish_to_registry == 'false'
        run: |
          echo "Wait until all releases are ready"
          kubectl get events -A -w &
          kubectl wait --for=condition=Ready release --all --all-namespaces --timeout=600s
  
      - name: Build and push KuboCD packages into public registry (${{ inputs.registry }})
        if: inputs.publish_to_registry == 'true'
        run: |
          for package in ${KUBOCD_PACKAGES}
          do
             echo "kubocd package ${package} --ociRepoPrefix $REGISTRY/$OWNER/${{ inputs.oci_package_prefix }}"
             kubocd package ${package} --ociRepoPrefix $REGISTRY/$OWNER/${{ inputs.oci_package_prefix }}
          done
        env:
          KCD_OCI_QUAY_IO_USER: ${{ secrets.REGISTRY_USERNAME }}
          KCD_OCI_QUAY_IO_SECRET: ${{ secrets.REGISTRY_ROBOT_TOKEN }}
