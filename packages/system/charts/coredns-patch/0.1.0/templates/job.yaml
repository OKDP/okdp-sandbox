---
apiVersion: batch/v1
kind: Job
metadata:
  name: coredns-config-job
  namespace: kube-system
spec:
  template:
    spec:
      serviceAccountName: coredns-config-sa
      containers:
        - name: kubectl
          image: {{ .Values.job.image }}
          command:
            - /bin/bash
            - -c
            - |
              # Install jq
              apt-get update && apt-get install -y jq
              
              echo "Checking CoreDNS configuration..."
              
              # Check if template already exists
              if kubectl get configmap coredns -n kube-system -o json | jq -r '.data.Corefile' | grep -q 'template IN A {{ .Values.ingressSuffix }}'; then
                echo "CoreDNS template already configured for {{ .Values.ingressSuffix }}"
              else
                echo "Adding CoreDNS template for {{ .Values.ingressSuffix }}"
                
                # Create new Corefile with template
                cat > /tmp/template-block <<EOF
                template IN A {{ .Values.ingressSuffix }} {
                    match .*\.{{ .Values.ingressSuffix | replace "." "\\." }}
                    answer "{{ "{{ .Name }}" }} 60 IN CNAME {{ .Values.ingressService }}."
                    fallthrough
                }
              EOF
                
                # Get current Corefile and add template before kubernetes block
                kubectl get configmap coredns -n kube-system -o json | jq -r '.data.Corefile' > /tmp/current-corefile
                
                # Insert template before kubernetes line
                awk '/^[[:space:]]*kubernetes/ { print "        template IN A {{ .Values.ingressSuffix }} {"; print "            match .*\\.{{ .Values.ingressSuffix | replace "." "\\\\." }}"; print "            answer \"{{ "{{ .Name }}" }} 60 IN CNAME {{ .Values.ingressService }}.\""; print "            fallthrough"; print "        }"; } { print }' /tmp/current-corefile > /tmp/new-corefile
                
                # Update ConfigMap
                kubectl create configmap coredns --from-file=Corefile=/tmp/new-corefile -n kube-system --dry-run=client -o yaml | kubectl apply -f -
                
                echo "CoreDNS configuration updated"
              fi
              
              # Restart CoreDNS
              echo "Restarting CoreDNS deployment..."
              kubectl rollout restart deployment coredns -n kube-system
              
              # Wait for rollout to complete
              kubectl rollout status deployment coredns -n kube-system --timeout=300s
              
              echo "CoreDNS patch completed successfully"
      restartPolicy: {{ .Values.job.restartPolicy }}
      nodeSelector:
        {{- toYaml .Values.job.nodeSelector | nindent 8 }} 